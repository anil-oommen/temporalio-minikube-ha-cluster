# My Custom Secrets 
apiVersion: v1
kind: Secret
metadata:
  name: custom-environment-secret
  annotations:
#     Refer https://cert-manager.io/docs/tutorials/syncing-secrets-across-namespaces/ 
      reflector.v1.k8s.emberstack.com/reflection-allowed: "true"
      reflector.v1.k8s.emberstack.com/reflection-allowed-namespaces: "default"
      reflector.v1.k8s.emberstack.com/reflection-auto-enabled: "true"
      reflector.v1.k8s.emberstack.com/reflection-auto-namespaces: "default"
  labels:
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: custom-environment-secret
    app.kubernetes.io/source: minikube-setup-secure-certcrds.yaml
  namespace: cert-manager
type: Opaque
data:
  #Base64 Encoded.
  keystore_password: "Y0dGemMzZHZjbVJtYjNKQlF6Z3lOakk0TVRNeFdGSlM="
  ES_KEYSTORE_PASSWORD: "Y0dGemMzZHZjbVJtYjNKQlF6Z3lOakk0TVRNeFdGSlM="

# ##############################################################################
# A SelfSigned CA , Issuing Other Certificate
# https://medium.com/geekculture/a-simple-ca-setup-with-kubernetes-cert-manager-bc8ccbd9c2


---
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: trust-manager-selfsigned-issuer
  namespace: cert-manager
spec:
  selfSigned: {}

---
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: ca-signed-cert-issuer
  namespace: cert-manager
spec:
  ca:
    secretName: trust-manager-base-ca-secret

# 0. Trust Root CA Certificate
---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: trust-manager-base-ca
  namespace: cert-manager
spec:
  isCA: true
  commonName: trust-manager-base-ca
  secretName: trust-manager-base-ca-secret
  secretTemplate:
    annotations:
#     Refer https://cert-manager.io/docs/tutorials/syncing-secrets-across-namespaces/ 
      reflector.v1.k8s.emberstack.com/reflection-allowed: "true"
      reflector.v1.k8s.emberstack.com/reflection-allowed-namespaces: "default"
      reflector.v1.k8s.emberstack.com/reflection-auto-enabled: "true"
      reflector.v1.k8s.emberstack.com/reflection-auto-namespaces: "default"
    labels:
      app.kubernetes.io/name: ca
      app.kubernetes.io/group: temporal
  privateKey:
    algorithm: ECDSA
    size: 256
  issuerRef:
    name: trust-manager-selfsigned-issuer
    kind: ClusterIssuer
    group: cert-manager.io


# 1. General Certificate .
---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: general-cert
  namespace: cert-manager
spec:
  commonName: general-cert
  isCA: false
# if the secret generated has a suffix its temporary and something is blocked and need to be investigated, probably namespace acccess. 
  secretName: general-cert-secret
  secretTemplate:
    annotations:
#     Refer https://cert-manager.io/docs/tutorials/syncing-secrets-across-namespaces/ 
      reflector.v1.k8s.emberstack.com/reflection-allowed: "true"
      reflector.v1.k8s.emberstack.com/reflection-allowed-namespaces: "default"
      reflector.v1.k8s.emberstack.com/reflection-auto-enabled: "true"
      reflector.v1.k8s.emberstack.com/reflection-auto-namespaces: "default"
    labels:
      app.kubernetes.io/name: general
      app.kubernetes.io/group: temporal
  duration: 24h # 1Year
  renewBefore: 10h # 15d
  subject:
    organizations:
      - general.local
  dnsNames:
  - general.local
  issuerRef:
    name: ca-signed-cert-issuer
    kind: ClusterIssuer
    group: cert-manager.io
  privateKey:
    algorithm: RSA
    encoding: PKCS1
    size: 2048
  usages:
    - server auth
    - client auth
  keystores:
    jks:
      create: true
      passwordSecretRef: # Password used to encrypt the keystore
        key: keystore_password
        name: custom-environment-secret
    pkcs12:
      create: true
      passwordSecretRef: # Password used to encrypt the keystore
        key: keystore_password
        name: custom-environment-secret

# 2. ElasticSearch Certificate .
---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: elasticsearch-cert
  namespace: cert-manager
spec:
  secretName: elasticsearch-cert-secret
  duration: 8760h # 1Year
  renewBefore: 360h # 15d
  secretTemplate:
    annotations:
#     Refer https://cert-manager.io/docs/tutorials/syncing-secrets-across-namespaces/ 
      reflector.v1.k8s.emberstack.com/reflection-allowed: "true"
      reflector.v1.k8s.emberstack.com/reflection-allowed-namespaces: "default"
      reflector.v1.k8s.emberstack.com/reflection-auto-enabled: "true"
      reflector.v1.k8s.emberstack.com/reflection-auto-namespaces: "default"
    labels:
      app.kubernetes.io/name: general
      app.kubernetes.io/group: temporal
  subject:
    organizations:
      - elasticsearch.local
    organizationalUnits:
      - minikube
  dnsNames:
  - es-elasticsearch-master
  - elasticsearch.local
  issuerRef:
    name: ca-signed-cert-issuer
    kind: ClusterIssuer
  privateKey:
    algorithm: RSA
    encoding: PKCS1
    size: 2048
  usages:
    - server auth
    - client auth
  keystores:
    jks:
      create: true
      passwordSecretRef: # Password used to encrypt the keystore
        key: keystore_password
        name: custom-environment-secret
    pkcs12:
      create: true
      passwordSecretRef: # Password used to encrypt the keystore
        key: keystore_password
        name: custom-environment-secret
    
# 2. Cassandra Certificate .
---
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: cassandra-cert
  namespace: cert-manager
spec:
  secretName: cassandra-cert-secret
  duration: 8760h # 1Year
  renewBefore: 360h # 15d
  secretTemplate:
    annotations:
#     Refer https://cert-manager.io/docs/tutorials/syncing-secrets-across-namespaces/ 
      reflector.v1.k8s.emberstack.com/reflection-allowed: "true"
      reflector.v1.k8s.emberstack.com/reflection-allowed-namespaces: "default"
      reflector.v1.k8s.emberstack.com/reflection-auto-enabled: "true"
      reflector.v1.k8s.emberstack.com/reflection-auto-namespaces: "default"
    labels:
      app.kubernetes.io/name: general
      app.kubernetes.io/group: temporal
  subject:
    organizations:
      - cassandra.local
    organizationalUnits:
      - minikube
  dnsNames:
  - cassandra
  issuerRef:
    name: ca-signed-cert-issuer
    kind: ClusterIssuer
  privateKey:
    algorithm: RSA
    encoding: PKCS1
    size: 2048
  usages:
    - server auth
    - client auth
  keystores:
    jks:
      create: true
      passwordSecretRef: # Password used to encrypt the keystore
        key: keystore_password
        name: custom-environment-secret
    pkcs12:
      create: true
      passwordSecretRef: # Password used to encrypt the keystore
        key: keystore_password
        name: custom-environment-secret

### 
# https://cert-manager.io/docs/projects/trust-manager/
# consolidate all truststores as a bundle.
#---
#apiVersion: trust.cert-manager.io/v1alpha1
#kind: Bundle
#metadata:
#  name: trust-bundle
#spec:
#  sources:
#  - useDefaultCAs: true
#  - secret:
#      name: "trust-manager-base-ca-secret"
#      key: "tls.crt"
#  target:
#    configMap:
#      key: "trust-bundle.pem"